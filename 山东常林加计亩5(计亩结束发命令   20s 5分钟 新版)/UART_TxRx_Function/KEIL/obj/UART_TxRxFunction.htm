<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\UART_TxRxFunction.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\UART_TxRxFunction.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 4.1 [Build 481]: Last Updated: Mon Aug 21 08:12:11 2017
<BR><P>
<H3>Maximum Stack Usage =        564 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; GprsSendData &rArr; FrameLengthToASC &rArr; __aeabi_uidivmod
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[5]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SysTick_Handler</a><BR>
 <LI><a href="#[c]">Default_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">Default_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[28]">Reset_Handler</a> from startup_nuc131.o(.text) referenced from startup_nuc131.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_nuc131.o(.text) referenced from startup_nuc131.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_nuc131.o(.text) referenced from startup_nuc131.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_nuc131.o(.text) referenced from startup_nuc131.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_nuc131.o(.text) referenced from startup_nuc131.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from startup_nuc131.o(.text) referenced from startup_nuc131.o(RESET)
 <LI><a href="#[6]">BOD_IRQHandler</a> from startup_nuc131.o(.text) referenced from startup_nuc131.o(RESET)
 <LI><a href="#[7]">WDT_IRQHandler</a> from startup_nuc131.o(.text) referenced from startup_nuc131.o(RESET)
 <LI><a href="#[8]">EINT0_IRQHandler</a> from main.o(i.EINT0_IRQHandler) referenced from startup_nuc131.o(RESET)
 <LI><a href="#[9]">EINT1_IRQHandler</a> from startup_nuc131.o(.text) referenced from startup_nuc131.o(RESET)
 <LI><a href="#[a]">GPAB_IRQHandler</a> from main.o(i.GPAB_IRQHandler) referenced from startup_nuc131.o(RESET)
 <LI><a href="#[b]">GPCDEF_IRQHandler</a> from startup_nuc131.o(.text) referenced from startup_nuc131.o(RESET)
 <LI><a href="#[c]">Default_Handler</a> from startup_nuc131.o(.text) referenced 2 times from startup_nuc131.o(RESET)
 <LI><a href="#[d]">TMR0_IRQHandler</a> from main.o(i.TMR0_IRQHandler) referenced from startup_nuc131.o(RESET)
 <LI><a href="#[e]">TMR1_IRQHandler</a> from main.o(i.TMR1_IRQHandler) referenced from startup_nuc131.o(RESET)
 <LI><a href="#[f]">TMR2_IRQHandler</a> from main.o(i.TMR2_IRQHandler) referenced from startup_nuc131.o(RESET)
 <LI><a href="#[10]">TMR3_IRQHandler</a> from main.o(i.TMR3_IRQHandler) referenced from startup_nuc131.o(RESET)
 <LI><a href="#[11]">UART02_IRQHandler</a> from main.o(i.UART02_IRQHandler) referenced from startup_nuc131.o(RESET)
 <LI><a href="#[12]">UART1_IRQHandler</a> from main.o(i.UART1_IRQHandler) referenced from startup_nuc131.o(RESET)
 <LI><a href="#[13]">SPI0_IRQHandler</a> from startup_nuc131.o(.text) referenced from startup_nuc131.o(RESET)
 <LI><a href="#[14]">UART3_IRQHandler</a> from startup_nuc131.o(.text) referenced from startup_nuc131.o(RESET)
 <LI><a href="#[15]">UART4_IRQHandler</a> from startup_nuc131.o(.text) referenced from startup_nuc131.o(RESET)
 <LI><a href="#[16]">UART5_IRQHandler</a> from startup_nuc131.o(.text) referenced from startup_nuc131.o(RESET)
 <LI><a href="#[17]">I2C0_IRQHandler</a> from startup_nuc131.o(.text) referenced from startup_nuc131.o(RESET)
 <LI><a href="#[18]">I2C1_IRQHandler</a> from startup_nuc131.o(.text) referenced from startup_nuc131.o(RESET)
 <LI><a href="#[19]">CAN0_IRQHandler</a> from main.o(i.CAN0_IRQHandler) referenced from startup_nuc131.o(RESET)
 <LI><a href="#[1a]">CAN1_IRQHandler</a> from startup_nuc131.o(.text) referenced from startup_nuc131.o(RESET)
 <LI><a href="#[1b]">PWM0_IRQHandler</a> from startup_nuc131.o(.text) referenced from startup_nuc131.o(RESET)
 <LI><a href="#[1c]">PWM1_IRQHandler</a> from startup_nuc131.o(.text) referenced from startup_nuc131.o(RESET)
 <LI><a href="#[1d]">BPWM0_IRQHandler</a> from startup_nuc131.o(.text) referenced from startup_nuc131.o(RESET)
 <LI><a href="#[1e]">BPWM1_IRQHandler</a> from startup_nuc131.o(.text) referenced from startup_nuc131.o(RESET)
 <LI><a href="#[1f]">BRAKE0_IRQHandler</a> from startup_nuc131.o(.text) referenced from startup_nuc131.o(RESET)
 <LI><a href="#[20]">BRAKE1_IRQHandler</a> from startup_nuc131.o(.text) referenced from startup_nuc131.o(RESET)
 <LI><a href="#[21]">PWRWU_IRQHandler</a> from startup_nuc131.o(.text) referenced from startup_nuc131.o(RESET)
 <LI><a href="#[22]">ADC_IRQHandler</a> from startup_nuc131.o(.text) referenced from startup_nuc131.o(RESET)
 <LI><a href="#[23]">CKD_IRQHandler</a> from startup_nuc131.o(.text) referenced from startup_nuc131.o(RESET)
 <LI><a href="#[24]">RTC_IRQHandler</a> from startup_nuc131.o(.text) referenced from startup_nuc131.o(RESET)
 <LI><a href="#[25]">main</a> from main.o(i.main) referenced from entry7.o(.ARM.Collect$$$$00000007)
 <LI><a href="#[26]">SystemInit</a> from system_nuc131.o(i.SystemInit) referenced from startup_nuc131.o(.text)
 <LI><a href="#[27]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_nuc131.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[27]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc131.o(.text)
</UL>
<P><STRONG><a name="[a9]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[29]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[34]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[aa]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7.o(.ARM.Collect$$$$00000007))

<P><STRONG><a name="[28]"></a>Reset_Handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, startup_nuc131.o(.text))

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc131.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc131.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc131.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc131.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc131.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc131.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc131.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc131.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc131.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc131.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc131.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc131.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc131.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc131.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>BPWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc131.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc131.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>BPWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc131.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc131.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>BRAKE0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc131.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc131.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>BRAKE1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc131.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc131.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>CAN1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc131.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc131.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CKD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc131.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc131.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc131.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc131.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>GPCDEF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc131.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc131.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc131.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc131.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc131.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc131.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc131.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc131.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc131.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc131.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>PWRWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc131.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc131.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc131.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc131.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc131.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc131.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc131.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc131.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc131.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc131.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc131.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc131.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc131.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc131.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[2c]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetBaudRate
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetCANBitRate
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startingup
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jwdcap
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_IRQHandler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Data
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrameLengthToASC
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertCanToCarDat
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConverJMsnumToASC
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConverJMdataToASC
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConverIntToASC
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_data
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Data
</UL>

<P><STRONG><a name="[ac]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[2b]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jwdcap
</UL>

<P><STRONG><a name="[2d]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jwdcap
</UL>

<P><STRONG><a name="[30]"></a>__aeabi_lmul</STRONG> (Thumb, 122 bytes, Stack size 64 bytes, llmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jwdcap
</UL>

<P><STRONG><a name="[ad]"></a>_ll_mul</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, llmul.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsConnectTcp
</UL>

<P><STRONG><a name="[7f]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2pfnCallback
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2TOpfnCallback
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSendData
</UL>

<P><STRONG><a name="[ae]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertCanToCarDat
</UL>

<P><STRONG><a name="[af]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[31]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartpfnCallback
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartTOpfnCallback
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSendRp
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSendJMRp
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSendData
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSendControlState
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsConnectTcp
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmBDRSSend
</UL>

<P><STRONG><a name="[a6]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b1]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[33]"></a>_memset$wrapper</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[3a]"></a>strstr</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2pfnCallback
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2TOpfnCallback
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART02_IRQHandler
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSendRp
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSendJMRp
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSendData
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSendControlState
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsConnectTcp
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmBDRSSend
</UL>

<P><STRONG><a name="[74]"></a>strlen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrameLengthToASC
</UL>

<P><STRONG><a name="[79]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsConnectTcp
</UL>

<P><STRONG><a name="[2f]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[b2]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[2e]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[b3]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[2a]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[b4]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>ADC_INIT</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, main.o(i.ADC_INIT))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82]"></a>ADC_Open</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, adc.o(i.ADC_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ADC
</UL>

<P><STRONG><a name="[35]"></a>AVclose</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(i.AVclose))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AVclose &rArr; sysPrintf1 &rArr; _PutChar_f1 &rArr; UART_EnableInt
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPrintf1
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[37]"></a>Adc_Data</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, main.o(i.Adc_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Adc_Data &rArr; Read_ADC &rArr; ADC_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ADC
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[39]"></a>AlarmBDRSSend</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, main.o(i.AlarmBDRSSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AlarmBDRSSend &rArr; GprsSendComm &rArr; _PutChar_f &rArr; UART_EnableInt
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaiBuDianYuanPowerOffFun
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCardChangeAlarmFun
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSendComm
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Ms
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackBatteryPowerOffFun
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a0]"></a>AscToHex</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, main.o(i.AscToHex))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyGps
</UL>

<P><STRONG><a name="[3c]"></a>BackBatteryPowerOffFun</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(i.BackBatteryPowerOffFun))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmBDRSSend
</UL>

<P><STRONG><a name="[a7]"></a>BatteryChargeMangment</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, main.o(i.BatteryChargeMangment))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BatteryChargeMangment
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19]"></a>CAN0_IRQHandler</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, main.o(i.CAN0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CAN0_IRQHandler &rArr; CAN_MsgInterrupt &rArr; CAN_Receive &rArr; CAN_ReadMsgObj
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_CLR_INT_PENDING_BIT
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MsgInterrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc131.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>CANRx_initial</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, main.o(i.CANRx_initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CANRx_initial &rArr; CAN_SetRxMsg &rArr; CAN_SetRxMsgObj
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetRxMsg
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_EnableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4f]"></a>CAN_BasicReceiveMsg</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, can.o(i.CAN_BasicReceiveMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_BasicReceiveMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
</UL>

<P><STRONG><a name="[41]"></a>CAN_CLR_INT_PENDING_BIT</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, can.o(i.CAN_CLR_INT_PENDING_BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN_CLR_INT_PENDING_BIT
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_IRQHandler
</UL>

<P><STRONG><a name="[43]"></a>CAN_EnableInt</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, can.o(i.CAN_EnableInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_EnableInt
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_LeaveInitMode
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRx_initial
</UL>

<P><STRONG><a name="[46]"></a>CAN_EnterInitMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, can.o(i.CAN_EnterInitMode))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetBaudRate
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_EnableInt
</UL>

<P><STRONG><a name="[48]"></a>CAN_GetCANBitRate</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, can.o(i.CAN_GetCANBitRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CAN_GetCANBitRate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetBaudRate
</UL>

<P><STRONG><a name="[4e]"></a>CAN_IsNewDataReceived</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, can.o(i.CAN_IsNewDataReceived))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ReadMsgObj
</UL>

<P><STRONG><a name="[47]"></a>CAN_LeaveInitMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, can.o(i.CAN_LeaveInitMode))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetBaudRate
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_EnableInt
</UL>

<P><STRONG><a name="[40]"></a>CAN_MsgInterrupt</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, main.o(i.CAN_MsgInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CAN_MsgInterrupt &rArr; CAN_Receive &rArr; CAN_ReadMsgObj
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_IRQHandler
</UL>

<P><STRONG><a name="[4b]"></a>CAN_Open</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, can.o(i.CAN_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CAN_Open &rArr; CAN_SetBaudRate &rArr; SystemCoreClockUpdate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetBaudRate
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4d]"></a>CAN_ReadMsgObj</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, can.o(i.CAN_ReadMsgObj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN_ReadMsgObj
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_IsNewDataReceived
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
</UL>

<P><STRONG><a name="[4a]"></a>CAN_Receive</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, can.o(i.CAN_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CAN_Receive &rArr; CAN_ReadMsgObj
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ReadMsgObj
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_BasicReceiveMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MsgInterrupt
</UL>

<P><STRONG><a name="[4c]"></a>CAN_SetBaudRate</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, can.o(i.CAN_SetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CAN_SetBaudRate &rArr; SystemCoreClockUpdate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_LeaveInitMode
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetCANBitRate
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Open
</UL>

<P><STRONG><a name="[45]"></a>CAN_SetRxMsg</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, can.o(i.CAN_SetRxMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CAN_SetRxMsg &rArr; CAN_SetRxMsgObj
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetRxMsgObj
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRx_initial
</UL>

<P><STRONG><a name="[51]"></a>CAN_SetRxMsgObj</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, can.o(i.CAN_SetRxMsgObj))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CAN_SetRxMsgObj
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFreeIF
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetRxMsg
</UL>

<P><STRONG><a name="[53]"></a>CAN_data</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, main.o(i.CAN_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CAN_data &rArr; Get_Data &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[86]"></a>CLK_EnableModuleClock</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, clk.o(i.CLK_EnableModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[55]"></a>CLK_EnablePLL</STRONG> (Thumb, 348 bytes, Stack size 40 bytes, clk.o(i.CLK_EnablePLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CLK_EnablePLL &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
</UL>

<P><STRONG><a name="[84]"></a>CLK_EnableXtalRC</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, clk.o(i.CLK_EnableXtalRC))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[58]"></a>CLK_SetCoreClock</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, clk.o(i.CLK_SetCoreClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = CLK_SetCoreClock &rArr; CLK_EnablePLL &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[59]"></a>CLK_SetHCLK</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, clk.o(i.CLK_SetHCLK))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CLK_SetHCLK &rArr; SystemCoreClockUpdate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[85]"></a>CLK_SetModuleClock</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, clk.o(i.CLK_SetModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CLK_SetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[56]"></a>CLK_WaitClockReady</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, clk.o(i.CLK_WaitClockReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLK_WaitClockReady
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[5a]"></a>ConverIntToASC</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, main.o(i.ConverIntToASC))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ConverIntToASC &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertCanToCarDat
</UL>

<P><STRONG><a name="[5b]"></a>ConverJMdataToASC</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, main.o(i.ConverJMdataToASC))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ConverJMdataToASC &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jwdcap
</UL>

<P><STRONG><a name="[5c]"></a>ConverJMsnumToASC</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, main.o(i.ConverJMsnumToASC))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ConverJMsnumToASC &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a8]"></a>ConverStateBitToASC</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, main.o(i.ConverStateBitToASC))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ConverStateBitToASC
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5d]"></a>ConvertCanToCarDat</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, main.o(i.ConvertCanToCarDat))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ConvertCanToCarDat &rArr; ConverIntToASC &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NETERROR_SEND
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConverIntToASC
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[68]"></a>DF_Erase</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(i.DF_Erase))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DF_WriteccidFlag
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DF_WriteHour
</UL>

<P><STRONG><a name="[60]"></a>DF_Read</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(i.DF_Read))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DF_WriteccidFlag
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DF_WriteHour
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DF_ReadccidFlag
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DF_Readboundstate
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DF_ReadSWstate
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DF_ReadHour
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DF_ReadCCIDNumber
</UL>

<P><STRONG><a name="[5f]"></a>DF_ReadCCIDNumber</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, main.o(i.DF_ReadCCIDNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DF_ReadCCIDNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DF_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMread_CCIDNumber
</UL>

<P><STRONG><a name="[61]"></a>DF_ReadHour</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, main.o(i.DF_ReadHour))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DF_ReadHour
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DF_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMread_Hous
</UL>

<P><STRONG><a name="[62]"></a>DF_ReadSWstate</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, main.o(i.DF_ReadSWstate))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DF_ReadSWstate
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DF_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sns_read
</UL>

<P><STRONG><a name="[63]"></a>DF_Readboundstate</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, main.o(i.DF_Readboundstate))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DF_Readboundstate
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DF_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMread_boundstate
</UL>

<P><STRONG><a name="[64]"></a>DF_ReadccidFlag</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, main.o(i.DF_ReadccidFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DF_ReadccidFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DF_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMread_ccidFlag
</UL>

<P><STRONG><a name="[66]"></a>DF_Write</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(i.DF_Write))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DF_WriteccidFlag
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DF_WriteHour
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DF_WriteCCIDNumber
</UL>

<P><STRONG><a name="[65]"></a>DF_WriteCCIDNumber</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, main.o(i.DF_WriteCCIDNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DF_WriteCCIDNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DF_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMwrite_CCIDNumber
</UL>

<P><STRONG><a name="[67]"></a>DF_WriteHour</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, main.o(i.DF_WriteHour))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DF_WriteHour
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DF_Write
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DF_Read
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DF_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMwrite_Hours
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMread_Hous
</UL>

<P><STRONG><a name="[69]"></a>DF_WriteccidFlag</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, main.o(i.DF_WriteccidFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DF_WriteccidFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DF_Write
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DF_Read
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DF_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMwrite_ccidFlag
</UL>

<P><STRONG><a name="[6a]"></a>Delay_1ms</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.Delay_1ms))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Ms
</UL>

<P><STRONG><a name="[3e]"></a>Delay_Ms</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, main.o(i.Delay_Ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Delay_Ms
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSendRp
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSendJMRp
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSendControlState
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsConnectTcp
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmBDRSSend
</UL>

<P><STRONG><a name="[6b]"></a>EEPROMread_CCIDNumber</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(i.EEPROMread_CCIDNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = EEPROMread_CCIDNumber &rArr; DF_ReadCCIDNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DF_ReadCCIDNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsConnectTcp
</UL>

<P><STRONG><a name="[6d]"></a>EEPROMread_Hous</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(i.EEPROMread_Hous))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = EEPROMread_Hous &rArr; DF_WriteHour
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DF_WriteHour
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DF_ReadHour
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6e]"></a>EEPROMread_boundstate</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i.EEPROMread_boundstate))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = EEPROMread_boundstate &rArr; DF_Readboundstate
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DF_Readboundstate
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6f]"></a>EEPROMread_ccidFlag</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i.EEPROMread_ccidFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = EEPROMread_ccidFlag &rArr; DF_ReadccidFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DF_ReadccidFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsConnectTcp
</UL>

<P><STRONG><a name="[70]"></a>EEPROMwrite_CCIDNumber</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main.o(i.EEPROMwrite_CCIDNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = EEPROMwrite_CCIDNumber &rArr; DF_WriteCCIDNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DF_WriteCCIDNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsConnectTcp
</UL>

<P><STRONG><a name="[71]"></a>EEPROMwrite_Hours</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main.o(i.EEPROMwrite_Hours))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = EEPROMwrite_Hours &rArr; DF_WriteHour
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DF_WriteHour
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[72]"></a>EEPROMwrite_ccidFlag</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main.o(i.EEPROMwrite_ccidFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = EEPROMwrite_ccidFlag &rArr; DF_WriteccidFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DF_WriteccidFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsConnectTcp
</UL>

<P><STRONG><a name="[8]"></a>EINT0_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, main.o(i.EINT0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc131.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>FrameLengthToASC</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, main.o(i.FrameLengthToASC))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = FrameLengthToASC &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSendData
</UL>

<P><STRONG><a name="[a]"></a>GPAB_IRQHandler</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, main.o(i.GPAB_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPAB_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc131.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>GPIO_EnableInt</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gpio.o(i.GPIO_EnableInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_EnableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_INIT
</UL>

<P><STRONG><a name="[75]"></a>GPIO_INIT</STRONG> (Thumb, 668 bytes, Stack size 24 bytes, main.o(i.GPIO_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GPIO_INIT &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EnableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[76]"></a>GPIO_SetMode</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, gpio.o(i.GPIO_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_INIT
</UL>

<P><STRONG><a name="[54]"></a>Get_Data</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, main.o(i.Get_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Get_Data &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_data
</UL>

<P><STRONG><a name="[78]"></a>GprsConnectTcp</STRONG> (Thumb, 408 bytes, Stack size 24 bytes, main.o(i.GprsConnectTcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GprsConnectTcp &rArr; GprsSendComm &rArr; _PutChar_f &rArr; UART_EnableInt
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSendComm
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMwrite_ccidFlag
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMwrite_CCIDNumber
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMread_ccidFlag
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMread_CCIDNumber
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Ms
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3f]"></a>GprsSendComm</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(i.GprsSendComm))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GprsSendComm &rArr; _PutChar_f &rArr; UART_EnableInt
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PutChar_f
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSendRp
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSendJMRp
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSendData
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSendControlState
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsConnectTcp
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmBDRSSend
</UL>

<P><STRONG><a name="[7c]"></a>GprsSendControlState</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, main.o(i.GprsSendControlState))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GprsSendControlState &rArr; GprsSendComm &rArr; _PutChar_f &rArr; UART_EnableInt
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSendComm
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Ms
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>GprsSendData</STRONG> (Thumb, 300 bytes, Stack size 184 bytes, main.o(i.GprsSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = GprsSendData &rArr; FrameLengthToASC &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSendhex
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSendComm
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrameLengthToASC
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[80]"></a>GprsSendJMRp</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, main.o(i.GprsSendJMRp))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GprsSendJMRp &rArr; GprsSendComm &rArr; _PutChar_f &rArr; UART_EnableInt
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSendComm
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Ms
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[81]"></a>GprsSendRp</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, main.o(i.GprsSendRp))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GprsSendRp &rArr; GprsSendComm &rArr; _PutChar_f &rArr; UART_EnableInt
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSendComm
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Ms
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7e]"></a>GprsSendhex</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(i.GprsSendhex))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GprsSendhex &rArr; _PutChar_f &rArr; UART_EnableInt
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PutChar_f
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSendData
</UL>

<P><STRONG><a name="[5e]"></a>NETERROR_SEND</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, main.o(i.NETERROR_SEND))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NETERROR_SEND
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertCanToCarDat
</UL>

<P><STRONG><a name="[38]"></a>Read_ADC</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, main.o(i.Read_ADC))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Read_ADC &rArr; ADC_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Data
</UL>

<P><STRONG><a name="[3d]"></a>SIMCardChangeAlarmFun</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.SIMCardChangeAlarmFun))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmBDRSSend
</UL>

<P><STRONG><a name="[90]"></a>SPN_Display</STRONG> (Thumb, 160 bytes, Stack size 20 bytes, main.o(i.SPN_Display))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SPN_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_IRQHandler
</UL>

<P><STRONG><a name="[83]"></a>SYS_Init</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, main.o(i.SYS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SYS_Init &rArr; CLK_SetCoreClock &rArr; CLK_EnablePLL &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableXtalRC
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[93]"></a>SYS_ResetChip</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys.o(i.SYS_ResetChip))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART02_IRQHandler
</UL>

<P><STRONG><a name="[98]"></a>SYS_ResetModule</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sys.o(i.SYS_ResetModule))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
</UL>

<P><STRONG><a name="[87]"></a>Send_changepage</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(i.Send_changepage))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Send_changepage &rArr; sysPrintf1 &rArr; _PutChar_f1 &rArr; UART_EnableInt
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPrintf1
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[88]"></a>Send_data</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, main.o(i.Send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Send_data &rArr; sysPrintf1 &rArr; _PutChar_f1 &rArr; UART_EnableInt
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPrintf1
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[89]"></a>Send_longdata</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, main.o(i.Send_longdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Send_longdata &rArr; sysPrintf1 &rArr; _PutChar_f1 &rArr; UART_EnableInt
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPrintf1
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[50]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, system_nuc131.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemCoreClockUpdate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetBaudRate
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
</UL>

<P><STRONG><a name="[26]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_nuc131.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc131.o(.text)
</UL>
<P><STRONG><a name="[8a]"></a>TIMER0_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, main.o(i.TIMER0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TIMER0_Init &rArr; TIMER_Open &rArr; TIMER_GetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8c]"></a>TIMER2_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, main.o(i.TIMER2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TIMER2_Init &rArr; TIMER_Open &rArr; TIMER_GetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8d]"></a>TIMER3_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, main.o(i.TIMER3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TIMER3_Init &rArr; TIMER_Open &rArr; TIMER_GetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8e]"></a>TIMER_GetModuleClock</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, timer.o(i.TIMER_GetModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIMER_GetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
</UL>

<P><STRONG><a name="[8b]"></a>TIMER_Open</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, timer.o(i.TIMER_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TIMER_Open &rArr; TIMER_GetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_Init
</UL>

<P><STRONG><a name="[d]"></a>TMR0_IRQHandler</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, main.o(i.TMR0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TMR0_IRQHandler &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc131.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TMR1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i.TMR1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc131.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TMR2_IRQHandler</STRONG> (Thumb, 372 bytes, Stack size 24 bytes, main.o(i.TMR2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TMR2_IRQHandler &rArr; startingup &rArr; sysPrintf1 &rArr; _PutChar_f1 &rArr; UART_EnableInt
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startingup
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPN_Display
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc131.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TMR3_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, main.o(i.TMR3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc131.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>UART02_IRQHandler</STRONG> (Thumb, 340 bytes, Stack size 24 bytes, main.o(i.UART02_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = UART02_IRQHandler &rArr; uart2pfnCallback &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DisableInt
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetChip
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartpfnCallback
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartTOpfnCallback
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2pfnCallback
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2TOpfnCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc131.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>UART0_Init</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, main.o(i.UART0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = UART0_Init &rArr; UART_Open &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetTimeoutCnt
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableInt
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DisableInt
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12]"></a>UART1_IRQHandler</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, main.o(i.UART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART1_IRQHandler &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DisableInt
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc131.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>UART1_Init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, main.o(i.UART1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = UART1_Init &rArr; UART_Open &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetTimeoutCnt
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableInt
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DisableInt
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9d]"></a>UART2_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(i.UART2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = UART2_Init &rArr; UART_Open &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableInt
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[94]"></a>UART_DisableInt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(i.UART_DisableInt))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART02_IRQHandler
</UL>

<P><STRONG><a name="[9b]"></a>UART_EnableInt</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, uart.o(i.UART_EnableInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_EnableInt
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PutChar_f
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PutChar_f1
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
</UL>

<P><STRONG><a name="[99]"></a>UART_Open</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, uart.o(i.UART_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = UART_Open &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
</UL>

<P><STRONG><a name="[9a]"></a>UART_SetTimeoutCnt</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uart.o(i.UART_SetTimeoutCnt))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
</UL>

<P><STRONG><a name="[9f]"></a>VerifyGps</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, main.o(i.VerifyGps))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VerifyGps
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AscToHex
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a4]"></a>WDT_Open</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, wdt.o(i.WDT_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WDT_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3b]"></a>WaiBuDianYuanPowerOffFun</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(i.WaiBuDianYuanPowerOffFun))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmBDRSSend
</UL>

<P><STRONG><a name="[a1]"></a>_PutChar_f1</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(i._PutChar_f1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _PutChar_f1 &rArr; UART_EnableInt
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPrintf1
</UL>

<P><STRONG><a name="[49]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MsgInterrupt
</UL>

<P><STRONG><a name="[b5]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[b6]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[b7]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[a2]"></a>jwdcap</STRONG> (Thumb, 1110 bytes, Stack size 80 bytes, main.o(i.jwdcap))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = jwdcap &rArr; __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConverJMdataToASC
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25]"></a>main</STRONG> (Thumb, 2980 bytes, Stack size 336 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = main &rArr; GprsSendData &rArr; FrameLengthToASC &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Open
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Open
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sns_read
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jwdcap
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaiBuDianYuanPowerOffFun
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyGps
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_longdata
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_data
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_changepage
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMCardChangeAlarmFun
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSendRp
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSendJMRp
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSendData
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSendControlState
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsConnectTcp
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_INIT
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMwrite_Hours
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMread_boundstate
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMread_Hous
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Ms
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertCanToCarDat
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConverStateBitToASC
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConverJMsnumToASC
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_data
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRx_initial
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryChargeMangment
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackBatteryPowerOffFun
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmBDRSSend
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Data
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVclose
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_INIT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry7.o(.ARM.Collect$$$$00000007)
</UL>
<P><STRONG><a name="[a5]"></a>sns_read</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, main.o(i.sns_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = sns_read &rArr; DF_ReadSWstate
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DF_ReadSWstate
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8f]"></a>startingup</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, main.o(i.startingup))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = startingup &rArr; sysPrintf1 &rArr; _PutChar_f1 &rArr; UART_EnableInt
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPrintf1
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_IRQHandler
</UL>

<P><STRONG><a name="[36]"></a>sysPrintf1</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, main.o(i.sysPrintf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sysPrintf1 &rArr; _PutChar_f1 &rArr; UART_EnableInt
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PutChar_f1
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startingup
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_longdata
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_data
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_changepage
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVclose
</UL>

<P><STRONG><a name="[96]"></a>uart2TOpfnCallback</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, main.o(i.uart2TOpfnCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = uart2TOpfnCallback &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART02_IRQHandler
</UL>

<P><STRONG><a name="[95]"></a>uart2pfnCallback</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, main.o(i.uart2pfnCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = uart2pfnCallback &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART02_IRQHandler
</UL>

<P><STRONG><a name="[92]"></a>uartTOpfnCallback</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, main.o(i.uartTOpfnCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uartTOpfnCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART02_IRQHandler
</UL>

<P><STRONG><a name="[91]"></a>uartpfnCallback</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, main.o(i.uartpfnCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uartpfnCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART02_IRQHandler
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[c]"></a>Default_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc131.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc131.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_Init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_INIT
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRx_initial
</UL>

<P><STRONG><a name="[6c]"></a>SYS_UnlockReg</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(i.SYS_UnlockReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sns_read
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART02_IRQHandler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMwrite_ccidFlag
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMwrite_Hours
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMwrite_CCIDNumber
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMread_ccidFlag
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMread_boundstate
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMread_Hous
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMread_CCIDNumber
</UL>

<P><STRONG><a name="[7b]"></a>_PutChar_f</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, main.o(i._PutChar_f))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _PutChar_f &rArr; UART_EnableInt
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSendhex
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSendComm
</UL>

<P><STRONG><a name="[57]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, uart.o(i.CLK_GetPLLClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
</UL>

<P><STRONG><a name="[9e]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableInt
</UL>

<P><STRONG><a name="[52]"></a>GetFreeIF</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, can.o(i.GetFreeIF))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetRxMsgObj
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
